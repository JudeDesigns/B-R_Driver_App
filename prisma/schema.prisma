// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model
model User {
  id        String   @id @default(uuid())
  username  String   @unique
  password  String
  role      Role     @default(DRIVER)
  fullName  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isDeleted Boolean  @default(false)

  // Relations
  routes       Route[]       @relation("DriverRoutes")
  adminNotes   AdminNote[]   @relation("AdminNotes")
  safetyChecks SafetyCheck[] @relation("DriverSafetyChecks")
  documents    Document[]    @relation("DocumentUploads")
  files        File[]        @relation("FileUploads")

  @@index([role])
  @@index([isDeleted])
  @@map("users")
}

// Customer model
model Customer {
  id          String   @id @default(uuid())
  name        String
  address     String
  contactInfo String?
  email       String?
  preferences String?
  groupCode   String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  isDeleted   Boolean  @default(false)

  // Relations
  stops     Stop[]
  documents Document[] // Customer-level documents

  @@index([name])
  @@index([email])
  @@index([groupCode])
  @@index([isDeleted])
  @@map("customers")
}

// Route model
model Route {
  id          String      @id @default(uuid())
  routeNumber String?
  date        DateTime    @default(now())
  status      RouteStatus @default(PENDING)
  driverId    String? // Made optional since routes can have multiple drivers
  driver      User?       @relation("DriverRoutes", fields: [driverId], references: [id])
  uploadedBy  String? // ID of the admin who uploaded the route
  uploadedAt  DateTime    @default(now())
  sourceFile  String? // Name of the uploaded file
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  isDeleted   Boolean     @default(false)

  // Relations
  stops        Stop[]
  safetyChecks SafetyCheck[]

  @@index([routeNumber])
  @@index([date])
  @@index([status])
  @@index([driverId])
  @@index([isDeleted])
  @@map("routes")
}

// Stop model
model Stop {
  id                     String     @id @default(uuid())
  routeId                String
  route                  Route      @relation(fields: [routeId], references: [id])
  customerId             String
  customer               Customer   @relation(fields: [customerId], references: [id])
  sequence               Int
  address                String
  customerNameFromUpload String? // Original customer name from the upload
  driverNameFromUpload   String? // Original driver name from the upload
  orderNumberWeb         String? // Order # (Web) from the upload
  quickbooksInvoiceNum   String? // Invoice # from the upload
  initialDriverNotes     String? // Notes to be updated at top of the INVOICE
  status                 StopStatus @default(PENDING)
  onTheWayTime           DateTime? // Time when driver started the delivery (status changed to ON_THE_WAY)
  arrivalTime            DateTime? // Time when driver arrived at the stop (status changed to ARRIVED)
  completionTime         DateTime? // Time when delivery was completed (status changed to COMPLETED)
  signedInvoicePdfUrl    String?
  invoiceImageUrls       String[] @default([]) // URLs of uploaded invoice images for admin preview
  driverNotes            String? // Notes added by driver during delivery
  isCOD                  Boolean    @default(false) // COD Account flag
  paymentFlagCash        Boolean    @default(false) // Cash payment flag
  paymentFlagCheck       Boolean    @default(false) // Check payment flag
  paymentFlagCC          Boolean    @default(false) // Credit Card payment flag
  paymentFlagNotPaid     Boolean    @default(false) // Not paid flag
  returnFlagInitial      Boolean    @default(false) // Return flag from upload
  driverRemarkInitial    String? // Other Remarks from upload
  amount                 Float? // Amount from the upload
  // Payment amounts from Excel columns AK, AL, AM
  paymentAmountCash      Float?     @default(0) // Cash payment amount from column AK
  paymentAmountCheck     Float?     @default(0) // Check payment amount from column AL
  paymentAmountCC        Float?     @default(0) // Credit Card payment amount from column AM
  totalPaymentAmount     Float?     @default(0) // Sum of all payment amounts
  // Driver-recorded payment information (for future use)
  driverPaymentAmount    Float? // Payment amount recorded by driver during delivery
  driverPaymentMethods   String[] @default([]) // Payment methods selected by driver (Cash, Check, CC)
  createdAt              DateTime   @default(now())
  updatedAt              DateTime   @updatedAt
  isDeleted              Boolean    @default(false)

  // Relations
  returns       Return[]
  adminNotes    AdminNote[]
  stopDocuments StopDocument[]
  payments      Payment[] // Individual payment entries

  @@index([routeId])
  @@index([customerId])
  @@index([status])
  @@index([driverNameFromUpload])
  @@index([isDeleted])
  @@index([sequence])
  @@map("stops")
}

// Return model
model Return {
  id                  String   @id @default(uuid())
  stopId              String
  stop                Stop     @relation(fields: [stopId], references: [id])
  orderItemIdentifier String // Product ID or identifier
  productDescription  String? // Description of the returned product
  productId           String? // Add this field
  product             Product? @relation(fields: [productId], references: [id]) // Add this relation
  quantity            Int
  reasonCode          String
  warehouseLocation   String?
  vendorCreditNum     String?
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  isDeleted           Boolean  @default(false)

  @@map("returns")
}

// AdminNote model
model AdminNote {
  id             String    @id @default(uuid())
  stopId         String
  stop           Stop      @relation(fields: [stopId], references: [id])
  adminId        String
  admin          User      @relation("AdminNotes", fields: [adminId], references: [id])
  note           String
  readByDriver   Boolean   @default(false)
  readByDriverAt DateTime?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  isDeleted      Boolean   @default(false)

  @@index([stopId])
  @@index([adminId])
  @@index([readByDriver])
  @@index([isDeleted])
  @@map("admin_notes")
}

// SafetyCheck model
model SafetyCheck {
  id               String        @id @default(uuid())
  routeId          String
  route            Route         @relation(fields: [routeId], references: [id])
  driverId         String // ID of the driver who submitted the safety check
  driver           User          @relation("DriverSafetyChecks", fields: [driverId], references: [id])
  type             ChecklistType
  // Enhanced responses structure to match PRD requirements
  // Vehicle & Fuel Check fields
  date             DateTime? // Date field
  mileage1         String? // MIL #1
  mileage2         String? // MIL #2
  dieselLevel      String? // Diesel Level (Dropdown)
  palletsIn        Int? // Pallets IN
  palletsOut       Int? // Pallets OUT
  dpfLevel         String? // DPF Level
  dieselReceipt    Boolean? // Diesel Receipt
  dollNumber       String? // Doll #
  truckJackNumber  String? // Truck Jack #
  strapLevel       String? // Strap Level (Stupl Heve in PRD)
  palletJackNumber String? // Pallet Jack #
  truckNumber      String? // Truck #

  // Fueling Details
  dieselAmount         Float? // Diesel Amount
  creditCardNumber     String? // Credit Card No.
  fuelCapKeyNumber     String? // Key for Fuel Cap #
  creditCardCashAmount Float? // Credit Card / Cash Receive Amount
  cashBackAmount       Float? // Cash Back Amount

  // Photo/Video Upload Checklist
  frontLightsPhoto      Boolean? // Upload photo of front lights/tail lights
  electricityBoxPhoto   Boolean? // Upload photo of electricity box (power off)
  palletsPhoto          Boolean? // Upload photo of pallets/dolly/pallet jack
  vehicleConditionVideo Boolean? // Upload video of vehicle condition
  calledWarehouse       Boolean? // Called warehouse before leaving

  // Additional fields
  notes     String? // Additional notes

  // Simplified Safety Check fields (for start-of-day)
  lightsWorking      Boolean? // All lights working
  tiresCondition     Boolean? // Tires in good condition
  braksWorking       Boolean? // Brakes working properly
  vehicleClean       Boolean? // Vehicle is clean and presentable
  palletJackWorking  Boolean? // Pallet jack working properly
  dolliesSecured     Boolean? // Dollies secured and in good condition
  strapsAvailable    Boolean? // Straps available and in good condition
  routeReviewed      Boolean? // Route reviewed and understood

  responses Json // Keep original responses for backward compatibility
  timestamp DateTime @default(now())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isDeleted Boolean  @default(false)

  @@index([routeId])
  @@index([driverId])
  @@index([type])
  @@index([isDeleted])
  @@map("safety_checks")
}

// RouteUpload model to track uploaded files
model RouteUpload {
  id               String       @id @default(uuid())
  fileName         String
  originalFileName String
  uploadedBy       String // ID of the admin who uploaded the file
  uploadedAt       DateTime     @default(now())
  processedAt      DateTime?
  status           UploadStatus @default(PENDING)
  errorMessage     String?
  rowsProcessed    Int          @default(0)
  rowsSucceeded    Int          @default(0)
  rowsFailed       Int          @default(0)
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
  isDeleted        Boolean      @default(false)

  @@index([uploadedBy])
  @@index([status])
  @@index([uploadedAt])
  @@index([isDeleted])
  @@map("route_uploads")
}

// Product model
model Product {
  id          String   @id @default(uuid())
  name        String
  sku         String   @unique
  description String?
  unit        String? // e.g., "pound", "each", "case"
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  isDeleted   Boolean  @default(false)
  Return      Return[]

  @@index([sku])
  @@index([name])
  @@index([isDeleted])
  @@map("products")
}

// CustomerEmail model for tracking email notifications
model CustomerEmail {
  id                 String      @id @default(uuid())
  stopId             String // Related stop ID
  customerEmail      String // Customer email address
  subject            String // Email subject
  body               String // Email body (can be HTML)
  signedInvoiceUrl   String? // URL to the signed invoice PDF
  originalInvoiceUrl String? // URL to the original QuickBooks invoice PDF
  status             EmailStatus @default(PENDING)
  sentAt             DateTime?
  error              String? // Error message if sending failed
  createdAt          DateTime    @default(now())
  updatedAt          DateTime    @updatedAt
  isDeleted          Boolean     @default(false)

  @@index([stopId])
  @@index([status])
  @@index([sentAt])
  @@index([isDeleted])
  @@map("customer_emails")
}

// Document model for admin-uploaded documents that drivers can print
model Document {
  id          String       @id @default(uuid())
  title       String // Document title/name
  description String? // Optional description
  type        DocumentType // Type of document (invoice, credit_memo, other)
  fileName    String // Original file name
  filePath    String // Path to the uploaded file
  fileSize    Int // File size in bytes
  mimeType    String // MIME type of the file
  uploadedBy  String // ID of the admin who uploaded the document
  uploader    User         @relation("DocumentUploads", fields: [uploadedBy], references: [id])
  isActive    Boolean      @default(true) // Whether the document is active/available
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  isDeleted   Boolean      @default(false)

  // Document scope - either customer-level or stop-specific
  customerId  String? // If set, this is a customer-level document
  customer    Customer? @relation(fields: [customerId], references: [id])

  // Relations
  stopDocuments StopDocument[]

  @@index([type])
  @@index([uploadedBy])
  @@index([isActive])
  @@index([isDeleted])
  @@index([customerId])
  @@map("documents")
}

// Junction table for documents assigned to specific stops
model StopDocument {
  id         String   @id @default(uuid())
  stopId     String
  stop       Stop     @relation(fields: [stopId], references: [id])
  documentId String
  document   Document @relation(fields: [documentId], references: [id])
  isPrinted  Boolean  @default(false) // Whether the driver has printed this document
  printedAt  DateTime?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  isDeleted  Boolean  @default(false)

  @@unique([stopId, documentId]) // Prevent duplicate assignments
  @@index([stopId])
  @@index([documentId])
  @@index([isPrinted])
  @@index([isDeleted])
  @@map("stop_documents")
}

// Enums
enum Role {
  ADMIN
  DRIVER
  SUPER_ADMIN
}

enum RouteStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum StopStatus {
  PENDING
  ON_THE_WAY
  ARRIVED
  COMPLETED
  CANCELLED
  FAILED
}

enum ChecklistType {
  START_OF_DAY
  END_OF_DAY
}

enum UploadStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}

enum EmailStatus {
  PENDING
  SENT
  FAILED
}

enum DocumentType {
  INVOICE
  CREDIT_MEMO
  DELIVERY_RECEIPT
  RETURN_FORM
  OTHER
}

// Enhanced File Management System
model FileCategory {
  id            String   @id @default(uuid())
  name          String   @unique
  description   String?
  pathPrefix    String   // e.g., "documents/invoices"
  maxFileSize   Int      @default(10485760) // 10MB default
  allowedTypes  String[] @default([]) // MIME types
  retentionDays Int      @default(365) // How long to keep files
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  files File[]

  @@map("file_categories")
}

model File {
  id           String       @id @default(uuid())
  originalName String       // Original filename from upload
  storedName   String       // Generated filename for storage
  filePath     String       // Relative path from uploads root
  fileSize     Int          // File size in bytes
  mimeType     String       // MIME type
  categoryId   String?      // Optional category
  category     FileCategory? @relation(fields: [categoryId], references: [id])
  uploadedBy   String       // User who uploaded the file
  uploader     User         @relation("FileUploads", fields: [uploadedBy], references: [id])
  checksum     String       // SHA256 hash for duplicate detection
  metadata     Json?        // Additional metadata
  isArchived   Boolean      @default(false)
  archivedAt   DateTime?
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  isDeleted    Boolean      @default(false)

  // Relations
  versions   FileVersion[]
  thumbnails FileThumbnail[]

  @@index([categoryId])
  @@index([uploadedBy])
  @@index([checksum])
  @@index([isArchived])
  @@index([isDeleted])
  @@index([createdAt])
  @@map("files")
}

model FileVersion {
  id            String   @id @default(uuid())
  fileId        String
  file          File     @relation(fields: [fileId], references: [id])
  versionNumber Int      // 1, 2, 3, etc.
  filePath      String   // Path to this version
  fileSize      Int      // Size of this version
  createdAt     DateTime @default(now())

  @@index([fileId])
  @@map("file_versions")
}

model FileThumbnail {
  id        String                    @id @default(uuid())
  fileId    String
  file      File                      @relation(fields: [fileId], references: [id])
  size      ThumbnailSize             // small, medium, large
  filePath  String                    // Path to thumbnail
  width     Int
  height    Int
  createdAt DateTime                  @default(now())

  @@index([fileId])
  @@index([size])
  @@map("file_thumbnails")
}

enum ThumbnailSize {
  SMALL
  MEDIUM
  LARGE
}

// Payment model for individual payment entries
model Payment {
  id        String   @id @default(uuid())
  stopId    String
  amount    Float    // Payment amount
  method    String   // Payment method: "Cash", "Check", "Credit Card"
  notes     String?  // Optional notes about the payment
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  stop Stop @relation(fields: [stopId], references: [id], onDelete: Cascade)

  @@index([stopId])
  @@index([method])
  @@map("payments")
}
