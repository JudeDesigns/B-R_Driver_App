// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model
model User {
  id        String   @id @default(uuid())
  username  String   @unique
  password  String
  role      Role     @default(DRIVER)
  fullName  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  isDeleted Boolean  @default(false)

  // Relations
  routes        Route[]       @relation("DriverRoutes")
  adminNotes    AdminNote[]   @relation("AdminNotes")
  safetyChecks  SafetyCheck[] @relation("DriverSafetyChecks")

  @@map("users")
  @@index([role])
  @@index([isDeleted])
}

// Customer model
model Customer {
  id            String   @id @default(uuid())
  name          String
  address       String
  contactInfo   String?
  preferences   String?
  groupCode     String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  isDeleted     Boolean  @default(false)

  // Relations
  stops         Stop[]

  @@map("customers")
  @@index([name])
  @@index([groupCode])
  @@index([isDeleted])
}

// Route model
model Route {
  id            String      @id @default(uuid())
  routeNumber   String?
  date          DateTime    @default(now())
  status        RouteStatus @default(PENDING)
  driverId      String?     // Made optional since routes can have multiple drivers
  driver        User?       @relation("DriverRoutes", fields: [driverId], references: [id])
  uploadedBy    String?     // ID of the admin who uploaded the route
  uploadedAt    DateTime    @default(now())
  sourceFile    String?     // Name of the uploaded file
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  isDeleted     Boolean     @default(false)

  // Relations
  stops         Stop[]
  safetyChecks  SafetyCheck[]

  @@map("routes")
  @@index([routeNumber])
  @@index([date])
  @@index([status])
  @@index([driverId])
  @@index([isDeleted])
}

// Stop model
model Stop {
  id                  String      @id @default(uuid())
  routeId             String
  route               Route       @relation(fields: [routeId], references: [id])
  customerId          String
  customer            Customer    @relation(fields: [customerId], references: [id])
  sequence            Int
  address             String
  customerNameFromUpload String?   // Original customer name from the upload
  driverNameFromUpload  String?    // Original driver name from the upload
  orderNumberWeb      String?     // Order # (Web) from the upload
  quickbooksInvoiceNum String?    // Invoice # from the upload
  initialDriverNotes  String?     // Notes to be updated at top of the INVOICE
  status              StopStatus  @default(PENDING)
  onTheWayTime        DateTime?   // Time when driver started the delivery (status changed to ON_THE_WAY)
  arrivalTime         DateTime?   // Time when driver arrived at the stop (status changed to ARRIVED)
  completionTime      DateTime?   // Time when delivery was completed (status changed to COMPLETED)
  signedInvoicePdfUrl String?
  driverNotes         String?     // Notes added by driver during delivery
  isCOD               Boolean     @default(false)  // COD Account flag
  paymentFlagCash     Boolean     @default(false)  // Cash payment flag
  paymentFlagCheck    Boolean     @default(false)  // Check payment flag
  paymentFlagCC       Boolean     @default(false)  // Credit Card payment flag
  paymentFlagNotPaid  Boolean     @default(false)  // Not paid flag
  returnFlagInitial   Boolean     @default(false)  // Return flag from upload
  driverRemarkInitial String?     // Other Remarks from upload
  amount              Float?      // Amount from the upload
  createdAt           DateTime    @default(now())
  updatedAt           DateTime    @updatedAt
  isDeleted           Boolean     @default(false)

  // Relations
  returns             Return[]
  adminNotes          AdminNote[]

  @@map("stops")
  @@index([routeId])
  @@index([customerId])
  @@index([status])
  @@index([driverNameFromUpload])
  @@index([isDeleted])
  @@index([sequence])
}

// Return model
model Return {
  id                  String   @id @default(uuid())
  stopId              String
  stop                Stop     @relation(fields: [stopId], references: [id])
  orderItemIdentifier String   // Product ID or identifier
  productDescription  String?  // Description of the returned product
  quantity            Int
  reasonCode          String
  warehouseLocation   String?
  vendorCreditNum     String?
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  isDeleted           Boolean  @default(false)

  @@map("returns")
}

// AdminNote model
model AdminNote {
  id                  String   @id @default(uuid())
  stopId              String
  stop                Stop     @relation(fields: [stopId], references: [id])
  adminId             String
  admin               User     @relation("AdminNotes", fields: [adminId], references: [id])
  note                String
  readByDriver        Boolean  @default(false)
  readByDriverAt      DateTime?
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  isDeleted           Boolean  @default(false)

  @@map("admin_notes")
  @@index([stopId])
  @@index([adminId])
  @@index([readByDriver])
  @@index([isDeleted])
}

// SafetyCheck model
model SafetyCheck {
  id                  String        @id @default(uuid())
  routeId             String
  route               Route         @relation(fields: [routeId], references: [id])
  driverId            String        // ID of the driver who submitted the safety check
  driver              User          @relation("DriverSafetyChecks", fields: [driverId], references: [id])
  type                ChecklistType
  responses           Json
  timestamp           DateTime      @default(now())
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt
  isDeleted           Boolean       @default(false)

  @@map("safety_checks")
  @@index([routeId])
  @@index([driverId])
  @@index([type])
  @@index([isDeleted])
}

// RouteUpload model to track uploaded files
model RouteUpload {
  id                  String        @id @default(uuid())
  fileName            String
  originalFileName    String
  uploadedBy          String        // ID of the admin who uploaded the file
  uploadedAt          DateTime      @default(now())
  processedAt         DateTime?
  status              UploadStatus  @default(PENDING)
  errorMessage        String?
  rowsProcessed       Int           @default(0)
  rowsSucceeded       Int           @default(0)
  rowsFailed          Int           @default(0)
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt
  isDeleted           Boolean       @default(false)

  @@map("route_uploads")
  @@index([uploadedBy])
  @@index([status])
  @@index([uploadedAt])
  @@index([isDeleted])
}

// Enums
enum Role {
  ADMIN
  SUPER_ADMIN
  DRIVER
}

enum RouteStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum StopStatus {
  PENDING
  ON_THE_WAY
  ARRIVED
  COMPLETED
  CANCELLED
  FAILED
}

enum ChecklistType {
  START_OF_DAY
  END_OF_DAY
}

enum UploadStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}
