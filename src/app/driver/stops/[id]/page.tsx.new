"use client";

import React, { useState, useEffect, useCallback } from "react";
import { useRouter } from "next/navigation";
import Link from "next/link";
import { useSocket } from "@/hooks/useSocket";
import { SocketEvents, AdminNoteData } from "@/lib/socketClient";
import LoadingSpinner from "@/components/ui/LoadingSpinner";
import Notification from "@/components/ui/Notification";
import StatusBadge from "@/components/ui/StatusBadge";
import StatusUpdateSection from "@/components/driver/StatusUpdateSection";
import DriverNotes from "@/components/driver/DriverNotes";
import InvoiceUpload from "@/components/driver/InvoiceUpload";
import { ReturnData } from "@/components/driver/ReturnForm";

interface Customer {
  id: string;
  name: string;
  address: string;
  contactInfo: string | null;
  preferences: string | null;
}

interface Stop {
  id: string;
  sequence: number;
  customerNameFromUpload: string | null;
  orderNumberWeb: string | null;
  quickbooksInvoiceNum: string | null;
  initialDriverNotes: string | null;
  status: string;
  arrivalTime: string | null;
  completionTime: string | null;
  signedInvoicePdfUrl: string | null;
  driverNotes: string | null;
  isCOD: boolean;
  paymentFlagCash: boolean;
  paymentFlagCheck: boolean;
  paymentFlagCC: boolean;
  paymentFlagNotPaid: boolean;
  returnFlagInitial: boolean;
  driverRemarkInitial: string | null;
  amount: number | null;
  customer: Customer;
  route: {
    id: string;
    routeNumber: string | null;
    date: string;
  };
  adminNotes?: Array<{
    id: string;
    note: string;
    createdAt: string;
    admin: {
      username: string;
      fullName: string | null;
    };
  }>;
}

export default function StopDetailPage({
  params,
}: {
  params: Promise<{ id: string }> | { id: string };
}) {
  // Unwrap params with React.use()
  const unwrappedParams = React.use(params as Promise<{ id: string }>);
  const [stop, setStop] = useState<Stop | null>(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState("");
  const [token, setToken] = useState<string | null>(null);
  const [updatingStatus, setUpdatingStatus] = useState(false);
  const [driverNotes, setDriverNotes] = useState("");
  const [savingNotes, setSavingNotes] = useState(false);
  const [hasReturns, setHasReturns] = useState(false);
  const [returns, setReturns] = useState<any[]>([]);
  const [loadingReturns, setLoadingReturns] = useState(false);
  const [addingReturn, setAddingReturn] = useState(false);
  const [notificationVisible, setNotificationVisible] = useState(false);
  const [hasNewAdminNotes, setHasNewAdminNotes] = useState(false);

  const router = useRouter();

  // Initialize socket connection
  const { isConnected, joinRoom, subscribe } = useSocket();

  // Define fetchStopDetails as a useCallback to avoid dependency issues
  const fetchStopDetails = useCallback(async () => {
    if (!token) return;

    setLoading(true);
    setError("");

    try {
      const response = await fetch(`/api/driver/stops/${unwrappedParams.id}`, {
        headers: {
          Authorization: `Bearer ${token}`,
        },
        // Add cache: 'no-store' to prevent caching
        cache: "no-store",
      });

      if (!response.ok) {
        // Handle non-JSON responses
        const contentType = response.headers.get("content-type");
        if (contentType && contentType.includes("application/json")) {
          const errorData = await response.json();
          throw new Error(errorData.message || "Failed to fetch stop details");
        } else {
          throw new Error(`Server error: ${response.status} ${response.statusText}`);
        }
      }

      const data = await response.json();
      setStop(data);
      setDriverNotes(data.driverNotes || "");

      // After fetching stop details, fetch returns
      fetchReturns();
    } catch (err) {
      console.error("Error fetching stop details:", err);
      setError(err instanceof Error ? err.message : "An error occurred");
    } finally {
      setLoading(false);
    }
  }, [token, unwrappedParams.id]);

  // Fetch returns for this stop
  const fetchReturns = async () => {
    if (!token) return;

    setLoadingReturns(true);

    try {
      const response = await fetch(
        `/api/driver/stops/${unwrappedParams.id}/returns`,
        {
          headers: {
            Authorization: `Bearer ${token}`,
          },
          // Add cache: 'no-store' to prevent caching
          cache: "no-store",
        }
      );

      if (!response.ok) {
        // Handle non-JSON responses
        const contentType = response.headers.get("content-type");
        if (contentType && contentType.includes("application/json")) {
          const errorData = await response.json();
          throw new Error(errorData.message || "Failed to fetch returns");
        } else {
          throw new Error(`Server error: ${response.status} ${response.statusText}`);
        }
      }

      const data = await response.json();
      setReturns(data);
      setHasReturns(data.length > 0);
    } catch (err) {
      console.error("Error fetching returns:", err);
    } finally {
      setLoadingReturns(false);
    }
  };

  // Add a new return
  const handleAddReturn = async (returnData: ReturnData) => {
    if (!token) return;

    setAddingReturn(true);

    try {
      const response = await fetch(
        `/api/driver/stops/${unwrappedParams.id}/returns`,
        {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
            Authorization: `Bearer ${token}`,
          },
          body: JSON.stringify(returnData),
        }
      );

      if (!response.ok) {
        // Handle non-JSON responses
        const contentType = response.headers.get("content-type");
        if (contentType && contentType.includes("application/json")) {
          const errorData = await response.json();
          throw new Error(errorData.message || "Failed to add return");
        } else {
          throw new Error(`Server error: ${response.status} ${response.statusText}`);
        }
      }

      // Refresh returns list
      fetchReturns();
    } catch (err) {
      console.error("Error adding return:", err);
      throw err;
    } finally {
      setAddingReturn(false);
    }
  };

  useEffect(() => {
    // Check if user is logged in and has driver role
    const storedToken = localStorage.getItem("token");
    const userRole = localStorage.getItem("userRole");

    if (!storedToken || userRole !== "DRIVER") {
      router.push("/login");
    } else {
      setToken(storedToken);
    }
  }, [router]);

  useEffect(() => {
    if (token) {
      fetchStopDetails();
    }
  }, [token, fetchStopDetails]);

  // Set up WebSocket connection and event listeners
  useEffect(() => {
    if (!isConnected || !stop) return;

    // Join the driver's room and the specific route room
    const userId = localStorage.getItem("userId");
    if (userId) {
      joinRoom(`driver:${userId}`);
    }

    if (stop.route.id) {
      joinRoom(`route:${stop.route.id}`);
    }

    // Subscribe to admin note events
    const unsubscribeAdminNote = subscribe<AdminNoteData>(
      SocketEvents.ADMIN_NOTE_CREATED,
      (data) => {
        if (data.stopId === stop.id) {
          // Show notification
          setHasNewAdminNotes(true);
          setNotificationVisible(true);

          // Auto-hide notification after 5 seconds
          setTimeout(() => {
            setNotificationVisible(false);
          }, 5000);

          // Refresh stop details to get the new note
          fetchStopDetails();
        }
      }
    );

    return () => {
      unsubscribeAdminNote();
    };
  }, [isConnected, stop, joinRoom, subscribe, fetchStopDetails]);

  const updateStatus = async (newStatus: string) => {
    if (!token || !stop) return;

    setUpdatingStatus(true);
    setError("");

    try {
      const updateData: any = {
        status: newStatus,
      };

      // Set arrival time if status is ARRIVED
      if (newStatus === "ARRIVED" && !stop.arrivalTime) {
        updateData.arrivalTime = new Date().toISOString();
      }

      // Set completion time if status is COMPLETED
      if (newStatus === "COMPLETED" && !stop.completionTime) {
        updateData.completionTime = new Date().toISOString();
      }

      const response = await fetch(`/api/driver/stops/${unwrappedParams.id}`, {
        method: "PATCH",
        headers: {
          "Content-Type": "application/json",
          Authorization: `Bearer ${token}`,
        },
        body: JSON.stringify(updateData),
      });

      if (!response.ok) {
        // Handle non-JSON responses
        const contentType = response.headers.get("content-type");
        if (contentType && contentType.includes("application/json")) {
          const errorData = await response.json();
          throw new Error(errorData.message || "Failed to update status");
        } else {
          throw new Error(`Server error: ${response.status} ${response.statusText}`);
        }
      }

      // Refresh stop details
      fetchStopDetails();
    } catch (err) {
      console.error("Error updating status:", err);
      setError(err instanceof Error ? err.message : "An error occurred");
    } finally {
      setUpdatingStatus(false);
    }
  };

  const handleSaveDriverNotes = async (notes: string) => {
    if (!token || !stop) return;

    setSavingNotes(true);
    setError("");

    try {
      const response = await fetch(`/api/driver/stops/${unwrappedParams.id}`, {
        method: "PATCH",
        headers: {
          "Content-Type": "application/json",
          Authorization: `Bearer ${token}`,
        },
        body: JSON.stringify({
          driverNotes: notes,
        }),
      });

      if (!response.ok) {
        // Handle non-JSON responses
        const contentType = response.headers.get("content-type");
        if (contentType && contentType.includes("application/json")) {
          const errorData = await response.json();
          throw new Error(errorData.message || "Failed to save notes");
        } else {
          throw new Error(`Server error: ${response.status} ${response.statusText}`);
        }
      }

      // Refresh stop details
      fetchStopDetails();
    } catch (err) {
      console.error("Error saving notes:", err);
      setError(err instanceof Error ? err.message : "An error occurred");
      throw err;
    } finally {
      setSavingNotes(false);
    }
  };

  const handleUploadSuccess = (pdfUrl: string) => {
    fetchStopDetails();
  };

  const formatDate = (dateString: string | null) => {
    if (!dateString) return "N/A";

    const date = new Date(dateString);
    return date.toLocaleString("en-US", {
      year: "numeric",
      month: "short",
      day: "numeric",
      hour: "numeric",
      minute: "numeric",
    });
  };

  const isStatusButtonDisabled = (buttonStatus: string) => {
    if (!stop) return true;
    if (updatingStatus) return true;

    const statusOrder = ["PENDING", "ON_THE_WAY", "ARRIVED", "COMPLETED"];
    const currentIndex = statusOrder.indexOf(stop.status);
    const buttonIndex = statusOrder.indexOf(buttonStatus);

    // Can only progress to the next status in order
    return buttonIndex !== currentIndex + 1;
  };

  return (
    <div className="max-w-lg mx-auto space-y-6 pb-20">
      {/* Notification for new admin notes */}
      <Notification
        type="warning"
        title="New note from admin"
        message="You have received a new note from an administrator."
        isVisible={notificationVisible}
        onClose={() => setNotificationVisible(false)}
      />

      <div className="flex items-center justify-between mt-6">
        <h1 className="text-2xl font-medium text-black">Stop Details</h1>
        <button
          onClick={() => router.push("/driver/stops")}
          className="text-blue-500 hover:text-blue-600 transition duration-200"
        >
          &larr; Back to Stops
        </button>
      </div>

      {loading ? (
        <div className="flex justify-center items-center h-40">
          <LoadingSpinner size="lg" />
        </div>
      ) : error ? (
        <div className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded mb-4">
          {error}
        </div>
      ) : stop ? (
        <div className="space-y-6">
          {/* Customer Information */}
          <div className="bg-white border border-gray-200 rounded-lg overflow-hidden">
            <div className="p-4 bg-gray-50 border-b border-gray-200 flex justify-between items-center">
              <h2 className="font-medium text-gray-800">
                Customer Information
              </h2>
              <StatusBadge status={stop.status} />
            </div>
            <div className="p-4">
              <h3 className="text-lg font-medium text-gray-900 mb-1">
                {stop.customer.name}
              </h3>
              <p className="text-gray-600 mb-4">{stop.customer.address}</p>

              <div className="grid grid-cols-2 gap-4 text-sm">
                <div>
                  <span className="text-gray-500">Route Number:</span>
                  <p className="font-medium">
                    {stop.route.routeNumber || "N/A"}
                  </p>
                </div>
                <div>
                  <span className="text-gray-500">Date:</span>
                  <p className="font-medium">{formatDate(stop.route.date)}</p>
                </div>
                <div>
                  <span className="text-gray-500">Invoice #:</span>
                  <p className="font-medium">
                    {stop.quickbooksInvoiceNum || "N/A"}
                  </p>
                </div>
                <div>
                  <span className="text-gray-500">Order # (Web):</span>
                  <p className="font-medium">{stop.orderNumberWeb || "N/A"}</p>
                </div>
                <div>
                  <span className="text-gray-500">Sequence:</span>
                  <p className="font-medium">{stop.sequence}</p>
                </div>
                <div>
                  <span className="text-gray-500">Amount:</span>
                  <p className="font-medium">
                    {stop.amount ? `$${stop.amount.toFixed(2)}` : "N/A"}
                  </p>
                </div>
              </div>

              {stop.initialDriverNotes && (
                <div className="mt-4 bg-blue-50 p-3 rounded-md">
                  <h4 className="text-sm font-medium text-blue-800 mb-1">
                    Delivery Instructions:
                  </h4>
                  <p className="text-sm text-blue-700">
                    {stop.initialDriverNotes}
                  </p>
                </div>
              )}

              {/* Payment Flags */}
              <div className="mt-4">
                <h4 className="text-sm font-medium text-gray-700 mb-2">
                  Payment Information:
                </h4>
                <div className="flex flex-wrap gap-2">
                  {stop.isCOD && (
                    <span className="px-2 py-1 bg-yellow-100 text-yellow-800 text-xs font-medium rounded">
                      COD
                    </span>
                  )}
                  {stop.paymentFlagCash && (
                    <span className="px-2 py-1 bg-green-100 text-green-800 text-xs font-medium rounded">
                      Cash
                    </span>
                  )}
                  {stop.paymentFlagCheck && (
                    <span className="px-2 py-1 bg-blue-100 text-blue-800 text-xs font-medium rounded">
                      Check
                    </span>
                  )}
                  {stop.paymentFlagCC && (
                    <span className="px-2 py-1 bg-purple-100 text-purple-800 text-xs font-medium rounded">
                      Credit Card
                    </span>
                  )}
                  {stop.paymentFlagNotPaid && (
                    <span className="px-2 py-1 bg-red-100 text-red-800 text-xs font-medium rounded">
                      Not Paid
                    </span>
                  )}
                  {stop.returnFlagInitial && (
                    <span className="px-2 py-1 bg-orange-100 text-orange-800 text-xs font-medium rounded">
                      Return
                    </span>
                  )}
                </div>
              </div>
            </div>
          </div>

          {/* Status Update */}
          <div className="bg-white border border-gray-200 rounded-lg overflow-hidden">
            <div className="p-4 bg-gray-50 border-b border-gray-200">
              <h2 className="font-medium text-gray-800">Update Status</h2>
            </div>
            <div className="p-4">
              <div className="flex flex-col space-y-3">
                <div className="grid grid-cols-2 gap-3">
                  <button
                    onClick={() => updateStatus("ON_THE_WAY")}
                    disabled={isStatusButtonDisabled("ON_THE_WAY")}
                    className="py-2 px-4 bg-blue-600 text-white rounded-md font-medium disabled:opacity-50 disabled:cursor-not-allowed hover:bg-blue-700 transition duration-200"
                  >
                    {updatingStatus && stop.status === "PENDING" ? (
                      <span className="flex items-center justify-center">
                        <LoadingSpinner size="sm" className="-ml-1 mr-2 text-white" />
                        Updating...
                      </span>
                    ) : (
                      "Go"
                    )}
                  </button>
                  <button
                    onClick={() => updateStatus("ARRIVED")}
                    disabled={isStatusButtonDisabled("ARRIVED")}
                    className="py-2 px-4 bg-purple-600 text-white rounded-md font-medium disabled:opacity-50 disabled:cursor-not-allowed hover:bg-purple-700 transition duration-200"
                  >
                    {updatingStatus && stop.status === "ON_THE_WAY" ? (
                      <span className="flex items-center justify-center">
                        <LoadingSpinner size="sm" className="-ml-1 mr-2 text-white" />
                        Updating...
                      </span>
                    ) : (
                      "Arrived"
                    )}
                  </button>
                </div>
                <button
                  onClick={() => updateStatus("COMPLETED")}
                  disabled={isStatusButtonDisabled("COMPLETED")}
                  className="py-2 px-4 bg-green-600 text-white rounded-md font-medium disabled:opacity-50 disabled:cursor-not-allowed hover:bg-green-700 transition duration-200"
                >
                  {updatingStatus && stop.status === "ARRIVED" ? (
                    <span className="flex items-center justify-center">
                      <LoadingSpinner size="sm" className="-ml-1 mr-2 text-white" />
                      Updating...
                    </span>
                  ) : (
                    "Complete Delivery"
                  )}
                </button>
              </div>

              <div className="mt-4 grid grid-cols-2 gap-4 text-sm">
                <div>
                  <span className="text-gray-500">Arrival Time:</span>
                  <p className="font-medium">{formatDate(stop.arrivalTime)}</p>
                </div>
                <div>
                  <span className="text-gray-500">Completion Time:</span>
                  <p className="font-medium">
                    {formatDate(stop.completionTime)}
                  </p>
                </div>
              </div>
            </div>
          </div>

          {/* Invoice Upload */}
          <div className="bg-white border border-gray-200 rounded-lg overflow-hidden">
            <div className="p-4 bg-gray-50 border-b border-gray-200">
              <h2 className="font-medium text-gray-800">Invoice Photo</h2>
            </div>
            <div className="p-4">
              {stop.signedInvoicePdfUrl ? (
                <div className="space-y-3">
                  <div className="bg-green-50 border border-green-200 rounded-md p-3 flex items-start">
                    <svg
                      className="h-5 w-5 text-green-500 mr-2 mt-0.5"
                      fill="none"
                      viewBox="0 0 24 24"
                      stroke="currentColor"
                    >
                      <path
                        strokeLinecap="round"
                        strokeLinejoin="round"
                        strokeWidth={2}
                        d="M5 13l4 4L19 7"
                      />
                    </svg>
                    <div>
                      <p className="text-sm text-green-700 font-medium">
                        Invoice photo uploaded successfully
                      </p>
                      <p className="text-xs text-green-600 mt-1">
                        The invoice has been converted to PDF
                      </p>
                    </div>
                  </div>
                  <a
                    href={stop.signedInvoicePdfUrl}
                    target="_blank"
                    rel="noopener noreferrer"
                    className="inline-block py-2 px-4 bg-blue-100 text-blue-700 rounded-md font-medium hover:bg-blue-200 transition duration-200"
                  >
                    View PDF
                  </a>
                </div>
              ) : (
                <InvoiceUpload
                  stopId={stop.id}
                  onUploadSuccess={handleUploadSuccess}
                />
              )}
            </div>
          </div>

          {/* Driver Notes */}
          <DriverNotes
            stopId={stop.id}
            initialNotes={driverNotes}
            onSave={handleSaveDriverNotes}
          />

          {/* Admin Notes */}
          {stop.adminNotes && stop.adminNotes.length > 0 && (
            <div className="bg-white border border-gray-200 rounded-lg overflow-hidden">
              <div className="p-4 bg-gray-50 border-b border-gray-200">
                <h2 className="font-medium text-gray-800">Notes from Admin</h2>
              </div>
              <div className="p-4">
                <div className="space-y-3">
                  {stop.adminNotes.map((note) => (
                    <div
                      key={note.id}
                      className="bg-yellow-50 border border-yellow-200 rounded-md p-3"
                    >
                      <p className="text-sm text-yellow-800">{note.note}</p>
                      <div className="flex justify-between items-center mt-2">
                        <p className="text-xs text-yellow-600">
                          From: {note.admin.fullName || note.admin.username}
                        </p>
                        <p className="text-xs text-yellow-600">
                          {new Date(note.createdAt).toLocaleString()}
                        </p>
                      </div>
                    </div>
                  ))}
                </div>
              </div>
            </div>
          )}
        </div>
      ) : (
        <div className="text-center py-8 text-gray-500">
          Stop not found. It may have been deleted or you may not have
          permission to view it.
        </div>
      )}
    </div>
  );
